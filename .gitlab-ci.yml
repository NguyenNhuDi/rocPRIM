# MIT License
#
# Copyright (c) 2017-2022 Advanced Micro Devices, Inc. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

include:
  - project: 'amd/ci-templates'
    ref: test-deps
    file:
      - /defaults.yaml
      - /deps-cmake.yaml
      - /deps-rocm.yaml
      - /deps-vcpkg.yaml
      - /gpus-rocm.yaml
      - /rules.yaml

stages:
  - lint
  - build
  - test
  - benchmark
  - autotune_config

variables:
  PACKAGE_DIR: $BUILD_DIR/package

clang-format:
  extends:
    - .deps:rocm
  stage: lint
  needs: []
  tags:
    - rocm-build
  variables:
    CLANG_FORMAT: "/opt/rocm/llvm/bin/clang-format"
    GIT_CLANG_FORMAT: "/opt/rocm/llvm/bin/git-clang-format"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - cd $CI_PROJECT_DIR
    - git config --global --add safe.directory $CI_PROJECT_DIR
    - scripts/code-format/check-format.sh $CI_MERGE_REQUEST_DIFF_BASE_SHA --binary "$CLANG_FORMAT"

.cmake-minimum-vcpkg:
  extends:
    - .deps:rocm
    - .deps:cmake-minimum
    - .deps:vcpkg
  before_script:
    - !reference [".deps:rocm", before_script]
    - !reference [".deps:cmake-minimum", before_script]
    - !reference [".deps:vcpkg", before_script]
    - $VCPKG_DIR/vcpkg install
        gtest
        benchmark

.cmake-minimum-apt:
  extends:
    - .deps:rocm
    - .deps:cmake-minimum
  before_script:
    - !reference [".deps:rocm", before_script]
    - !reference [".deps:cmake-minimum", before_script]
    - $SUDO_CMD apt-get install -y -qq
        libgtest-dev
        libbenchmark-dev

.build:vcpkg-apt:
  stage: build
  tags:
    - rocm-build
  extends:
    - .gpus:rocm-gpus
    - .rules:build
  script:
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER="$AMDCLANG"
      -D CMAKE_CXX_FLAGS="-Wall -Wextra -Werror"
      -D CMAKE_BUILD_TYPE=Release
      "$(if [ -n "$VCPKG_DIR" ]; then echo "-DCMAKE_TOOLCHAIN_FILE=$VCPKG_DIR/scripts/buildsystems/vcpkg.cmake"; fi)"
      -D BUILD_TEST=ON
      -D BUILD_EXAMPLE=ON
      -D BUILD_BENCHMARK=ON
      -D GPU_TARGETS=$GPU_TARGETS
      -D AMDGPU_TEST_TARGETS=$GPU_TARGETS
      -S $CI_PROJECT_DIR
      -B $BUILD_DIR
    - cmake
      --build $BUILD_DIR
      --target test_basic benchmark_config_dispatch

build:cmake-minimum-vcpkg:
  stage: build
  needs: []
  extends:
    - .cmake-minimum-vcpkg
    - .build:vcpkg-apt

build:cmake-minimum-apt:
  stage: build
  needs: []
  extends:
    - .cmake-minimum-apt
    - .build:vcpkg-apt

.cmake-latest:
  extends:
    - .deps:rocm
    - .deps:cmake-latest
  before_script:
    - !reference [".deps:rocm", before_script]
    - !reference [".deps:cmake-latest", before_script]

.cmake-minimum:
  extends:
    - .deps:rocm
    - .deps:cmake-minimum
  before_script:
    - !reference [".deps:rocm", before_script]
    - !reference [".deps:cmake-minimum", before_script]

.build:common:
  stage: build
  tags:
    - rocm-build
  extends:
    - .gpus:rocm-gpus
    - .rules:build
  script:
    - mkdir -p $BUILD_DIR
    - cd $BUILD_DIR
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER="$AMDCLANG"
      -D CMAKE_CXX_FLAGS="-Wall -Wextra -Werror"
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TEST=ON
      -D BUILD_EXAMPLE=ON
      -D BUILD_BENCHMARK=OFF
      -D GPU_TARGETS=$GPU_TARGETS
      -D AMDGPU_TEST_TARGETS=$GPU_TARGETS
      -S $CI_PROJECT_DIR
      -B $BUILD_DIR
    - cmake --build $BUILD_DIR
  artifacts:
    paths:
    - $BUILD_DIR/test/test_*
    - $BUILD_DIR/test/rocprim/test_*
    - $BUILD_DIR/test/CTestTestfile.cmake
    - $BUILD_DIR/test/rocprim/CTestTestfile.cmake
    - $BUILD_DIR/gtest/
    - $BUILD_DIR/CMakeCache.txt
    - $BUILD_DIR/.ninja_log
    - $BUILD_DIR/CTestTestfile.cmake
    expire_in: 2 weeks

build:cmake-latest:
  stage: build
  needs: []
  extends:
    - .cmake-latest
    - .build:common

build:cmake-minimum:
  stage: build
  needs: []
  extends:
    - .cmake-minimum
    - .build:common

build:package:
  stage: build
  needs: []
  tags:
    - rocm-build
  extends:
    - .cmake-minimum
    - .gpus:rocm-gpus
    - .rules:build
  script:
    - mkdir -p $PACKAGE_DIR
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER="$AMDCLANG"
      -D CMAKE_BUILD_TYPE=Release
      -B $PACKAGE_DIR
      -S $CI_PROJECT_DIR
    - cd $PACKAGE_DIR
    - cpack -G "DEB;ZIP"
  artifacts:
    paths:
      - $PACKAGE_DIR/rocprim*.deb
      - $PACKAGE_DIR/rocprim*.zip
    expire_in: 2 weeks

build:benchmark:
  stage: build
  needs: []
  tags:
    - rocm-build
  extends:
    - .cmake-minimum
    - .gpus:rocm-gpus
    - .rules:build
  script:
    - mkdir -p $BUILD_DIR
    - cd $BUILD_DIR
    - cmake
      -B $BUILD_DIR
      -S $CI_PROJECT_DIR
      -G Ninja
      -D CMAKE_CXX_COMPILER="$AMDCLANG"
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TEST=OFF
      -D BUILD_EXAMPLE=OFF
      -D BUILD_BENCHMARK=ON
      -D GPU_TARGETS=$GPU_TARGETS
    - cmake --build .
  artifacts:
    paths:
      - $BUILD_DIR/benchmark/*
      - $BUILD_DIR/.ninja_log
      - $BUILD_DIR/deps/googlebenchmark/
    expire_in: 2 weeks

build:autotune:
  stage: build
  needs: []
  tags:
    - rocm-build
  extends:
    - .cmake-minimum
    - .gpus:rocm-gpus
    - .rules:manual
  variables:
    BENCHMARK_TARGETS: benchmark_config_tuning
  script:
    - mkdir -p $BUILD_DIR
    - cd $BUILD_DIR
    - 'printf "Building benchmark targets: %s\n" "$BENCHMARK_TARGETS"'
    - cmake
      -B $BUILD_DIR
      -S $CI_PROJECT_DIR
      -G Ninja
      -D CMAKE_CXX_COMPILER="$AMDCLANG"
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TEST=OFF
      -D BUILD_EXAMPLE=OFF
      -D BUILD_BENCHMARK=ON
      -D BENCHMARK_CONFIG_TUNING=ON
      -D GPU_TARGETS=$GPU_TARGETS
    - cmake --build . --target $BENCHMARK_TARGETS
    - 'rm -rf $BUILD_DIR/benchmark/benchmark*.parallel'
  artifacts:
    paths:
      - $BUILD_DIR/benchmark/benchmark*
      - $BUILD_DIR/.ninja_log
      - $BUILD_DIR/deps/googlebenchmark/
    expire_in: 1 week

test:
  stage: test
  extends:
    - .cmake-minimum
    - .rules:test
    - .gpus:rocm
  needs:
    - build:cmake-minimum
  script:
    - cd $BUILD_DIR
    - cmake
      -D CMAKE_PREFIX_PATH=/opt/rocm
      -P $CI_PROJECT_DIR/cmake/GenerateResourceSpec.cmake
    - cat ./resources.json
    - ctest
      --output-on-failure
      --repeat-until-fail 2
      --tests-regex "hip|$GPU_TARGET"
      --resource-spec-file ./resources.json
      --parallel $PARALLEL_JOBS

.test-package:
  script:
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER="$AMDCLANG"
      -D CMAKE_BUILD_TYPE=Release
      -D GPU_TARGETS=$GPU_TARGETS
      -S "$CI_PROJECT_DIR/test/extra"
      -B "$CI_PROJECT_DIR/package_test"
    - cmake --build "$CI_PROJECT_DIR/package_test"
    - "$CI_PROJECT_DIR/package_test/test_rocprim_package"
    - cd "$CI_PROJECT_DIR/package_test"
    - ctest --output-on-failure --repeat-until-fail 2

test:install:
  stage: test
  needs: []
  tags:
    - rocm
  extends:
    - .cmake-minimum
    - .rules:test
    - .gpus:rocm-gpus
  script:
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER="$AMDCLANG"
      -D CMAKE_BUILD_TYPE=Release
      -B build
      -S $CI_PROJECT_DIR
    - $SUDO_CMD cmake --build build --target install
    - !reference [.test-package, script]

test:deb:
  stage: test
  needs:
    - build:package
  tags:
    - rocm
  extends:
    - .cmake-minimum
    - .rules:test
    - .gpus:rocm-gpus
  script:
    - $SUDO_CMD dpkg -i $PACKAGE_DIR/rocprim*.deb
    - !reference [.test-package, script]

test:doc:
  stage: test
  extends: .rules:test
  needs: []
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq doxygen
  script:
    - cd doc
    - doxygen Doxyfile

.benchmark_run:
  stage: benchmark
  extends:
  - .cmake-minimum
  - .gpus:rocm
  variables:
    BENCHMARK_RESULT_DIR: ${CI_PROJECT_DIR}/benchmark_results/
    BENCHMARK_FILENAME_REGEX: ^benchmark
    BENCHMARK_ALGORITHM_REGEX: ""
  before_script:
    - 'printf "CI Variables used in benchmarks:\nBENCHMARK_RESULT_DIR: %s\nBENCHMARK_FILENAME_REGEX: %s\nBENCHMARK_ALGORITHM_REGEX: %s \n" "$BENCHMARK_RESULT_DIR" "$BENCHMARK_FILENAME_REGEX" "$BENCHMARK_ALGORITHM_REGEX"'
    - cd "${CI_PROJECT_DIR}"
    - mkdir -p "${BENCHMARK_RESULT_DIR}"


run_benchmark:
  needs:
    - build:benchmark
  extends:
    - .benchmark_run
    - .rules:benchmark
  script:
    - python3
      .gitlab/run_benchmarks.py
      --benchmark_dir "${BUILD_DIR}/benchmark"
      --benchmark_gpu_architecture "${GPU_TARGET}"
      --benchmark_output_dir "${BENCHMARK_RESULT_DIR}"
      --benchmark_filename_regex "${BENCHMARK_FILENAME_REGEX}"
      --benchmark_filter_regex "${BENCHMARK_ALGORITHM_REGEX}"

run_autotune:
  needs:
    - build:autotune
  extends:
    - .benchmark_run
    - .rules:manual
  variables:
    #temporarily disabled radix_sort in benchmark_filename_regex
    AUTOTUNE_FILENAME_REGEX: (?!^benchmark_device_radix_sort$)${BENCHMARK_FILENAME_REGEX}
  timeout: 8h
  artifacts:
    paths:
    - ${BENCHMARK_RESULT_DIR}/*.json
  script:
    - python3
      .gitlab/run_benchmarks.py
      --benchmark_dir "${BUILD_DIR}/benchmark"
      --benchmark_gpu_architecture "${GPU_TARGET}"
      --benchmark_output_dir "${BENCHMARK_RESULT_DIR}"
      --benchmark_filename_regex "${AUTOTUNE_FILENAME_REGEX}"
      --benchmark_filter_regex "${BENCHMARK_ALGORITHM_REGEX}" > /dev/null

run_autotune_config:
  stage: autotune_config
  image: python:3.10.5-buster
  extends:
    - .rules:manual
  needs:
    - run_autotune
  variables:
    AUTOTUNE_CONFIG_DIR: ${CI_PROJECT_DIR}/autotune_config
  script:
    - cd "${CI_PROJECT_DIR}"
    - mkdir -p "${AUTOTUNE_CONFIG_DIR}"
    - python3 -m pip install jinja2
    - python3
      scripts/autotune/create_optimization.py
      --benchmark_files "${CI_PROJECT_DIR}/benchmark_results/*.json"
      --out_basedir "${AUTOTUNE_CONFIG_DIR}"
  artifacts:
    paths:
    - ${AUTOTUNE_CONFIG_DIR}

scheduled-check-changes:
  extends: .rules:scheduled-check-changes
