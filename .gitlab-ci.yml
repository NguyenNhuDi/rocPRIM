# MIT License
#
# Copyright (c) 2017-2021 Advanced Micro Devices, Inc. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

include:
  - project: 'amd/ci-templates'
    ref: main
    file:
      - /defaults.yaml
      - /deps-cmake.yaml
      - /deps-docs.yaml
      - /deps-rocm.yaml
      - /deps-vcpkg.yaml
      - /gpus-rocm.yaml
      - /rules.yaml

stages:
  - build:cmake_latest   # Tests if builds succeed (CMake)
  - build:cmake_minimum  # Tests if builds succeed (CMake)
  - test    # Tests if unit tests are passing (CTest)
  - benchmark

variables:
  # Tested CMake versions
  CMAKE_MINIMUM_VERSION: 3.16.9
  CMAKE_MINIMUM_URL: "https://cmake.org/files/v3.16/cmake-3.16.9-Linux-x86_64.tar.gz"

  CMAKE_LATEST_VERSION: 3.21.4
  CMAKE_LATEST_URL: "https://cmake.org/files/v3.21/cmake-3.21.4-linux-x86_64.tar.gz" 
  # Cluster config

  # Image-specific helper
  SUDO_CMD: "sudo -E" # Must be "sudo" on images which don't use root user
  # Helper variables
  DEPS_DIR: $CI_PROJECT_DIR/deps
  BUILD_DIR: $CI_PROJECT_DIR/build

  CMAKE_MINIMUM_PATH: $DEPS_DIR/cmake-$CMAKE_MINIMUM_VERSION
  BUILD_MINIMUM_DIR: $BUILD_DIR/cmake-$CMAKE_MINIMUM_VERSION
  CMAKE_LATEST_PATH: $DEPS_DIR/cmake-$CMAKE_LATEST_VERSION
  BUILD_LATEST_DIR: $BUILD_DIR/cmake-$CMAKE_LATEST_VERSION
  PACKAGE_DIR: $BUILD_DIR/package

.deps:cmake-minimum:
  stage: build:cmake_minimum
  before_script:
    - $SUDO_CMD apt update -qq
    # | Used in the script    | Build tools | Fetch from https:// | rocminfo calls lsmod
    - $SUDO_CMD apt install -y -qq libidn11 wget tar xz-utils bzip2 libnuma-dev libunwind-dev git build-essential pkg-config ninja-build ca-certificates kmod
    # Fetch CMake only if the cache has not been restored
    - if [ ! -d $CMAKE_MINIMUM_PATH ]; then mkdir -p $CMAKE_MINIMUM_PATH; wget --no-check-certificate --quiet -O - $CMAKE_MINIMUM_URL | tar --strip-components=1 -xz -C $CMAKE_MINIMUM_PATH
    - fi
    - export PATH=$CMAKE_MINIMUM_PATH/bin:$PATH
    # Debug printing of environment for context when errors occur
    - hipconfig
  cache:
    key: $CMAKE_MINIMUM_VERSION
    paths:
      - $CMAKE_MINIMUM_PATH

.deps:cmake-latest:
  stage: build:cmake_latest
  before_script:
    - $SUDO_CMD apt update -qq
    # | Used in the script    | Build tools | Fetch from https:// | rocminfo calls lsmod
    - $SUDO_CMD apt install -y -qq wget tar xz-utils bzip2 libnuma-dev libunwind-dev git build-essential pkg-config ninja-build ca-certificates kmod
    # Fetch CMake only if the cache has not been restored
    - if [ ! -d $CMAKE_LATEST_PATH ]; then mkdir -p $CMAKE_LATEST_PATH; wget --no-check-certificate --quiet -O - $CMAKE_LATEST_URL | tar --strip-components=1 -xz -C $CMAKE_LATEST_PATH;
    - fi;
    - export PATH=$CMAKE_LATEST_PATH/bin:$PATH
    # Debug printing of environment for context when errors occur
    - hipconfig
  cache:
    key: $CMAKE_LATEST_VERSION
    paths:
      - $CMAKE_LATEST_PATH

.deps-cpu:cmake-latest:
  stage: build:cmake_latest
  before_script:
    - $SUDO_CMD apt update -qq
    - $SUDO_CMD apt install -y -qq apt-transport-https software-properties-common
    - $SUDO_CMD add-apt-repository ppa:ubuntu-toolchain-r/test
    # | Used in the script    | Build tools | Fetch from https:// | rocminfo calls lsmod
    - $SUDO_CMD apt install -y -qq wget tar xz-utils bzip2 libnuma-dev libunwind-dev git build-essential pkg-config ninja-build ca-certificates kmod g++-9
    # Fetch CMake only if the cache has not been restored
    - if [ ! -d $CMAKE_LATEST_PATH ]; then mkdir -p $CMAKE_LATEST_PATH; wget --no-check-certificate --quiet -O - $CMAKE_LATEST_URL | tar --strip-components=1 -xz -C $CMAKE_LATEST_PATH;
    - fi;
    - export PATH=$CMAKE_LATEST_PATH/bin:$PATH
    # Debug printing of environment for context when errors occur
    - hipconfig
  cache:
    key: $CMAKE_LATEST_VERSION
    paths:
      - $CMAKE_LATEST_PATH

.deps:doc:
  stage: test:doc
  before_script:
    - $SUDO_CMD apt update -qq
    - $SUDO_CMD apt install -y -qq doxygen

build:cmake-latest:
  extends:
    - .deps:cmake-latest
  tags:
    - rocm
  script:
    - mkdir -p $BUILD_LATEST_DIR
    - cd $BUILD_LATEST_DIR
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_CXX_FLAGS="-Wall -Wextra -Werror"
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TEST=ON
      -D BUILD_EXAMPLE=ON
      -D BUILD_BENCHMARK=OFF
      -D AMDGPU_TARGETS="gfx803;gfx900;gfx906"
      -D AMDGPU_TEST_TARGETS="gfx803;gfx900;gfx906"
      -S $CI_PROJECT_DIR
      -B $BUILD_LATEST_DIR
    - cmake
      --build $BUILD_LATEST_DIR
  artifacts:
    paths:
    - $BUILD_LATEST_DIR/test/test_*
    - $BUILD_LATEST_DIR/test/rocprim/test_*
    - $BUILD_LATEST_DIR/test/CTestTestfile.cmake
    - $BUILD_LATEST_DIR/test/rocprim/CTestTestfile.cmake
    - $BUILD_LATEST_DIR/gtest/
    - $BUILD_LATEST_DIR/CMakeCache.txt
    - $BUILD_LATEST_DIR/CTestTestfile.cmake
    expire_in: 2 weeks

# TODO: Enable the hip-cpu CI step
#build-cpu:cmake-latest:
#  extends:
#    - .deps-cpu:cmake-latest
#  tags:
#    - s9300
#    - rocm
#  script:
#    - mkdir -p $BUILD_LATEST_DIR
#    - cd $BUILD_LATEST_DIR
#    - cmake
#      -G Ninja
#      -D CMAKE_CXX_COMPILER=g++-9
#      -D CMAKE_CXX_FLAGS="-Wall -Wextra"
#      -D CMAKE_BUILD_TYPE=Release
#      -D BUILD_TEST=ON
#      -D BUILD_EXAMPLE=OFF
#      -D BUILD_BENCHMARK=OFF
#      -D USE_HIP_CPU=ON
#      -S $CI_PROJECT_DIR
#      -B $BUILD_LATEST_DIR
#    - cmake
#      --build $BUILD_LATEST_DIR
#      --parallel 3

build:cmake-minimum:
  extends:
    - .deps:cmake-minimum
  tags:
    - rocm
  needs:
    - job: build:cmake-latest
      artifacts: false
  script:
    - mkdir -p $BUILD_MINIMUM_DIR
    - cd $BUILD_MINIMUM_DIR
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_CXX_FLAGS="-Wall -Wextra -Werror"
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TEST=ON
      -D BUILD_EXAMPLE=ON
      -D BUILD_BENCHMARK=ON
      -D DISABLE_WERROR=OFF
      -D AMDGPU_TARGETS="gfx803;gfx900;gfx906"
      -D AMDGPU_TEST_TARGETS="gfx803;gfx900;gfx906"
      -B $BUILD_MINIMUM_DIR
      ../../.
    - cmake
      --build ./
  artifacts:
    paths:
    - $BUILD_MINIMUM_DIR/test/test_*
    - $BUILD_MINIMUM_DIR/test/rocprim/test_*
    - $BUILD_MINIMUM_DIR/test/CTestTestfile.cmake
    - $BUILD_MINIMUM_DIR/test/rocprim/CTestTestfile.cmake
    - $BUILD_MINIMUM_DIR/gtest/
    - $BUILD_MINIMUM_DIR/CMakeCache.txt
    - $BUILD_MINIMUM_DIR/CTestTestfile.cmake
    expire_in: 2 weeks

build:package:
  extends:
    - .deps:cmake-minimum
  tags:
    - rocm
  script:
    - mkdir -p $PACKAGE_DIR
    - cd $PACKAGE_DIR
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_BUILD_TYPE=Release
      -B $PACKAGE_DIR
      $CI_PROJECT_DIR
    - $SUDO_CMD cmake
      --build $PACKAGE_DIR
      --target install
    - $SUDO_CMD cpack
      -G "DEB;ZIP"
    - mkdir -p ../package_test && cd ../package_test
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_BUILD_TYPE=Release
      $CI_PROJECT_DIR/test/extra
    - cmake
      --build .
    - $SUDO_CMD ./test_rocprim_package
    - $SUDO_CMD ctest --output-on-failure --repeat-until-fail 2
  artifacts:
    paths:
      - $PACKAGE_DIR/rocprim*.deb
      - $PACKAGE_DIR/rocprim*.zip
    expire_in: 2 weeks

build:benchmark:
  extends:
    - .deps:cmake-latest
  tags:
    - mi25
    - rocm
  only:
    - ci-benchmark-extend
    - internal_benchmark
    - develop_stream
    - develop
    - master
  script:
    - mkdir build
    - cd build
    # Build hipCUB benchmark
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TEST=OFF
      -D BUILD_EXAMPLE=OFF
      -D BUILD_BENCHMARK=ON
      -D DISABLE_WERROR=OFF
      -D AMDGPU_TARGETS="gfx803;gfx900;gfx906"
      ..
    - cmake
      --build .
  artifacts:
    paths:
      - build/benchmark/*
      - build/googlebenchmark/
    expire_in: 2 weeks

include: '.gitlab-ci-gputest.yml'

benchmark_view:rocm_mi25:
  extends:
    - .deps:cmake-latest
  stage: benchmark
  when: manual
  only:
    - ci-benchmark-extend
    - internal_benchmark
    - develop_stream
    - develop
    - master
  needs:
    - build:benchmark
  tags:
    - mi25
    - rocm
  script:
    - $SUDO_CMD cmake
      -D BENCHMARK_BINARY_DIR=build/benchmark
      -D BENCHMARK_OUTPUT_DIR=.
      -P ${CI_PROJECT_DIR}/.gitlab/RunBenchmarks.cmake

benchmark_view:rocm_s9300:
  extends:
    - .deps:cmake-latest
  stage: benchmark
  when: manual
  only:
    - ci-benchmark-extend
    - internal_benchmark
    - develop_stream
    - develop
    - master
  needs:
    - build:benchmark
  tags:
    - s9300
    - rocm
  script:
    - $SUDO_CMD cmake
      -D BENCHMARK_BINARY_DIR=build/benchmark
      -D BENCHMARK_OUTPUT_DIR=.
      -P ${CI_PROJECT_DIR}/.gitlab/RunBenchmarks.cmake

benchmark_view:rocm_vega20:
  extends:
    - .deps:cmake-latest
  stage: benchmark
  when: manual
  only:
    - ci-benchmark-extend
    - internal_benchmark
    - develop_stream
    - develop
    - master
  needs:
    - build:benchmark
  tags:
    - vega20
    - rocm
  script:
    - $SUDO_CMD cmake
      -D BENCHMARK_BINARY_DIR=build/benchmark
      -D BENCHMARK_OUTPUT_DIR=.
      -P ${CI_PROJECT_DIR}/.gitlab/RunBenchmarks.cmake

test:deb:
  stage: test
  needs:
    - build:package
  tags:
    - rocm
  extends:
    - .deps:cmake-minimum
  script:
    - $SUDO_CMD apt update -qq
    - $SUDO_CMD apt install -y -qq rocm-core
    - $SUDO_CMD dpkg -i $PACKAGE_DIR/rocprim*.deb
    - mkdir -p package_test && cd package_test
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_BUILD_TYPE=Release
      $CI_PROJECT_DIR/test/extra
    - cmake
      --build .
    - $SUDO_CMD ctest --output-on-failure --repeat-until-fail 2
    - $SUDO_CMD dpkg -r rocprim
  allow_failure: true

test:doc:
  stage: test
  extends:
    - .rules:test
    - .build:docs

.benchmark-base:
  stage: benchmark
  extends:
    - .rules:benchmark
  variables:
    BENCHMARK_RESULT_DIR: ${CI_PROJECT_DIR}/benchmark_results
    BENCHMARK_RESULT_CACHE_DIR: ${BENCHMARK_RESULT_DIR}_cache

benchmark:
  needs:
    - build:benchmark
  extends:
    - .cmake-minimum
    - .gpus:rocm
    - .benchmark-base
  variables:
    BENCHMARK_FILENAME_REGEX: ^benchmark
    BENCHMARK_ALGORITHM_REGEX: ""
  script:
    - 'printf "CI Variables used in benchmarks:\nBENCHMARK_RESULT_DIR: %s\nBENCHMARK_FILENAME_REGEX: %s\nBENCHMARK_ALGORITHM_REGEX: %s \n" "$BENCHMARK_RESULT_DIR" "$BENCHMARK_FILENAME_REGEX" "$BENCHMARK_ALGORITHM_REGEX"'
    - cd "${CI_PROJECT_DIR}"
    - mkdir -p "${BENCHMARK_RESULT_DIR}"
    - python3
      .gitlab/run_benchmarks.py
      --benchmark_dir "${BUILD_DIR}/benchmark"
      --benchmark_gpu_architecture "${GPU_TARGET}"
      --benchmark_output_dir "${BENCHMARK_RESULT_DIR}"
      --benchmark_filename_regex "${BENCHMARK_FILENAME_REGEX}"
      --benchmark_filter_regex "${BENCHMARK_ALGORITHM_REGEX}"
  artifacts:
    paths:
      - ${BENCHMARK_RESULT_DIR}
    expire_in: 1 week

benchmark:cache-or-report:
  needs:
    - benchmark
  extends:
    - .benchmark-base
  tags:
    - single-cache
  cache:
    key: benchmark-cache
    paths:
      - ${BENCHMARK_RESULT_CACHE_DIR}
  script:
    # If on MR branch, generate report, else cache results
    - >
      if [ ! -z "${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}" ]; then
        if [ ! -d "${BENCHMARK_RESULT_CACHE_DIR}" ]; then
          echo 'ERROR: Cache directory does not exist'
          exit 1
        elif [ ! -d "${BENCHMARK_RESULT_DIR}" ]; then
          echo 'ERROR: Benchmark results directory does not exist'
          exit 1
        else
          echo 'INFO: Files in cache (reference benchmarks):'
          ls -al ${BENCHMARK_RESULT_CACHE_DIR}
          echo 'INFO: Generating report...'
          python3 .gitlab/generate_report.py --old ${BENCHMARK_RESULT_CACHE_DIR} --new ${BENCHMARK_RESULT_DIR}
        fi
      elif [ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ]; then
        echo 'INFO: Caching benchmark results...'
        mkdir -p ${BENCHMARK_RESULT_CACHE_DIR}
        cp -R ${BENCHMARK_RESULT_DIR}/*.json ${BENCHMARK_RESULT_CACHE_DIR}
      else
        echo 'ERROR: Neither on a merge-request branch or the default branch'
        exit 1
      fi


.autotune-base:
  stage: autotune
  extends:
    - .rules:manual
  variables:
    AUTOTUNE_RESULT_DIR: ${CI_PROJECT_DIR}/autotune_results

autotune:execute-tuning:
  needs:
    - autotune:build
  extends:
    - .autotune-base
    - .cmake-minimum
    - .gpus:rocm
  variables:
    AUTOTUNE_FILENAME_REGEX: ^benchmark
    AUTOTUNE_ALGORITHM_REGEX: ""
  timeout: 8h
  artifacts:
    paths:
      - ${AUTOTUNE_RESULT_DIR}/*.json
  script:
    - 'printf "CI Variables used in benchmarks:\nAUTOTUNE_RESULT_DIR: %s\nAUTOTUNE_FILENAME_REGEX: %s\nAUTOTUNE_ALGORITHM_REGEX: %s \n" "$AUTOTUNE_RESULT_DIR" "$AUTOTUNE_FILENAME_REGEX" "$AUTOTUNE_ALGORITHM_REGEX"'
    - cd "${CI_PROJECT_DIR}"
    - mkdir -p "${AUTOTUNE_RESULT_DIR}"
    - python3
      .gitlab/run_benchmarks.py
      --benchmark_dir "${BUILD_DIR}/benchmark"
      --benchmark_gpu_architecture "${GPU_TARGET}"
      --benchmark_output_dir "${AUTOTUNE_RESULT_DIR}"
      --benchmark_filename_regex "${AUTOTUNE_FILENAME_REGEX}"
      --benchmark_filter_regex "${AUTOTUNE_ALGORITHM_REGEX}"

autotune:generate-config:
  image: python:3.10.5-buster
  needs:
    - job: "autotune:execute-tuning"
      optional: true
  extends:
    - .rules:manual
    - .autotune-base
  variables:
    AUTOTUNE_CONFIG_REPO_PATH: /rocprim/include/rocprim/device/detail/config
    AUTOTUNE_RESULT_CACHE_DIR: ${AUTOTUNE_RESULT_DIR}_cache
  tags:
    - single-cache
  cache:
    key: autotune-cache
    paths:
      - autotune_results_cache/
  script:
    # Set cache dir variables depending on if this is a MR or not
    - >
      if [ ! -z "${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}" ]; then
        AUTOTUNE_RESULT_CACHE_BRANCH_DIR="${AUTOTUNE_RESULT_CACHE_DIR}/${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
        AUTOTUNE_RESULT_CACHE_TARGET_BRANCH_DIR="${AUTOTUNE_RESULT_CACHE_DIR}/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
      else 
        AUTOTUNE_RESULT_CACHE_BRANCH_DIR="${AUTOTUNE_RESULT_CACHE_DIR}/${CI_COMMIT_BRANCH}"
      fi
    # If the global cache dir does not exist, create it
    - mkdir -p $AUTOTUNE_RESULT_CACHE_DIR
    # If there are fresh results in the artifacts, cache them in the branch cache
    # If there are no fresh results, check branch cache
    # If there are no branch cache results, check TARGET branch cache
    # If there are TARGET branch cache results, cache them in the branch cache
    - >
      if [ -d "$AUTOTUNE_RESULT_DIR" ]; then 
        mkdir -p $AUTOTUNE_RESULT_CACHE_BRANCH_DIR
        cp -R -u ${AUTOTUNE_RESULT_DIR}/*.json ${AUTOTUNE_RESULT_CACHE_BRANCH_DIR}
      elif [ -d "$AUTOTUNE_RESULT_CACHE_BRANCH_DIR" ]; then
        mkdir -p $AUTOTUNE_RESULT_DIR
        cp -R -u ${AUTOTUNE_RESULT_CACHE_BRANCH_DIR}/*.json ${AUTOTUNE_RESULT_DIR}
      elif [ -d "$AUTOTUNE_RESULT_CACHE_TARGET_BRANCH_DIR" ]; then
        mkdir -p $AUTOTUNE_RESULT_DIR
        cp -R -u ${AUTOTUNE_RESULT_CACHE_TARGET_BRANCH_DIR}/*.json ${AUTOTUNE_RESULT_DIR}
        mkdir -p $AUTOTUNE_RESULT_CACHE_BRANCH_DIR
        cp -R -u ${AUTOTUNE_RESULT_DIR}/*.json ${AUTOTUNE_RESULT_CACHE_BRANCH_DIR}
      else
        echo 'ERROR: No autotune results found in previous artifacts, the branch cache or the target branch cache...'
        exit 1
      fi
    # List the final .json files to use for config generation
    - ls -al ${AUTOTUNE_RESULT_DIR}
    - cd "${CI_PROJECT_DIR}"
    - python3 -m pip install jinja2
    - mkdir -p ${AUTOTUNE_CONFIG_DIR}${AUTOTUNE_CONFIG_REPO_PATH}
    - python3
      scripts/autotune/create_optimization.py
      --benchmark_files ${AUTOTUNE_RESULT_DIR}/*.json
      --out_basedir "${AUTOTUNE_CONFIG_DIR}${AUTOTUNE_CONFIG_REPO_PATH}"
  artifacts:
    paths:
      - ${AUTOTUNE_CONFIG_DIR}

scheduled-check-changes:
  stage: autotune
  extends: .rules:scheduled-check-changes
