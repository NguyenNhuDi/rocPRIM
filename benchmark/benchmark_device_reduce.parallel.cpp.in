// MIT License
//
// Copyright (c) 2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include "benchmark_device_reduce.parallel.hpp"
extern std::vector<std::unique_ptr<config_autotune_interface>> config_autotune_vector;

namespace {
    int a = [] {
        auto* pointer_to_benchmark
            = new config_autotune_run_benchmark<@BS@u, @WS@u, @IPT@u, @DT@, rocprim::plus<@DT@>>; // create new object
        config_autotune_vector.push_back(std::unique_ptr<config_autotune_interface>(pointer_to_benchmark));  // put it in the vector
        return 0;
    }();
}
/*template struct tuning_run_benchmark<@BlockSize@, @WarpSize@, @ItemsPerThread@, @DataType@, rocprim::plus<@DataType@>>;*/
