#!/usr/bin/env groovy
@Library('rocJenkins@lwrubles/generic-pr-script') _
import com.amd.project.*
import com.amd.docker.*
import java.nio.file.Path;

def runCI = 
{
    nodeDetails, jobName->

    def prj = new rocProject('rocPRIM', 'Autotune')

    def nodes = new dockerNodes(nodeDetails, jobName, prj)

    def compileCommand =
    {
        platform, project->
        
        project.paths.construct_build_prefix()
        def command = """#!/usr/bin/env bash
        set -x
        cd ${project.paths.project_build_prefix}
        ${auxiliary.gfxTargetParser()}
        git config user.name 'ROCmMathLibrariesBot'
        git config user.email 'ROCmMathLibrariesBot@users.noreply.github.com'
        git checkout -b \$BRANCH_NAME
        scripts/autotune/autotune_usage_script.sh \$(sed -E 's/gfx([0-9a-f]+).*/\\1/' <<< \$gfx_arch)
        """

        platform.runCommand(this, command)
    }

    def testCommand = {
        platform, project ->

        writeFile(
            file: project.paths.project_build_prefix + "/createRocLibPR.py",
            text: libraryResource("com/amd/promotion/createRocLibPR.py"))
        withCredentials([usernamePassword(credentialsId: 'ROCmMathLibrariesBot', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_USERPASS')]) {
            def command = """#!/usr/bin/env bash
            set -x
            cd ${project.paths.project_build_prefix}
            ${auxiliary.gfxTargetParser()}
            python3 ./createRocLibPR.py -l rocPRIM -c \$GIT_USERPASS \\
                --title "Autotune update: \$gfx_arch_raw " \\
                --body "Update the autotuned information for \$gfx_arch_raw.\nThis is an autogenerated PR." \\
                --branch-name "autotune-\$gfx_arch_raw"
            """
            platform.runCommand(this, command)
        }
    }

    buildProject(prj, false, nodes.dockerArray, compileCommand, testCommand, null)
}

ci: { 
    String urlJobName = auxiliary.getTopJobName(env.BUILD_URL)

    def propertyList = ["compute-rocm-dkms-no-npi":[pipelineTriggers([cron('0 1 * * 0')])], 
                        "compute-rocm-dkms-no-npi-hipclang":[pipelineTriggers([cron('0 1 * * 0')])],
                        "rocm-docker":[]]
    propertyList = auxiliary.appendPropertyList(propertyList)

    def jobNameList = ["compute-rocm-dkms-no-npi-hipclang":([ubuntu18:['gfx900'],centos7:['gfx906'],centos8:['gfx906'],sles15sp1:['gfx908']])]
    jobNameList = auxiliary.appendJobNameList(jobNameList, 'rocPRIM')

    propertyList.each 
    {
        jobName, property->
        if (urlJobName == jobName)
            properties(auxiliary.addCommonProperties(property))
    }
    
    jobNameList.each 
    {
        jobName, nodeDetails->
        if (urlJobName == jobName)
            stage(jobName) {
                runCI(nodeDetails, jobName)
            }
    }

    // For url job names that are not listed by the jobNameList i.e. compute-rocm-dkms-no-npi-1901
    if(!jobNameList.keySet().contains(urlJobName))
    {
        properties(auxiliary.addCommonProperties([pipelineTriggers([cron('0 1 * * *')])]))
        stage(urlJobName) {
            runCI([ubuntu16:['gfx906']], urlJobName)
        }
    }
}
